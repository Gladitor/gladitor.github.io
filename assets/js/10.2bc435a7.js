(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{244:function(t,r,a){t.exports=a.p+"assets/img/connects.377c4f5a.png"},245:function(t,r,a){t.exports=a.p+"assets/img/jfc.19aec09e.png"},246:function(t,r,a){t.exports=a.p+"assets/img/jmc1.97e8dbbe.png"},247:function(t,r,a){t.exports=a.p+"assets/img/jmc2.db3d99a8.png"},248:function(t,r,a){t.exports=a.p+"assets/img/wireshark1.c7550fb0.png"},249:function(t,r,a){t.exports=a.p+"assets/img/wireshark2.4c9874e6.png"},250:function(t,r,a){t.exports=a.p+"assets/img/sourcecode.35238a37.png"},398:function(t,r,a){"use strict";a.r(r);var s=a(2),e=Object(s.a)({},function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"springboot-应用-loopbackconnector-分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springboot-应用-loopbackconnector-分析","aria-hidden":"true"}},[t._v("#")]),t._v(" Springboot 应用 loopbackconnector 分析")]),t._v(" "),s("h5",{attrs:{id:"自连接现象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自连接现象","aria-hidden":"true"}},[t._v("#")]),t._v(" 自连接现象")]),t._v(" "),s("p",[t._v("客户反馈服务器上应用启动时无端开启一些 TCP 端口监听，占用系统资源，造成浪费。本着不放过任何一个问题的原则，使用 netstat 查看确实存在一些 tcp 链路，并且这些链路都是 loopback，但没有端口监听，说明是连接建立后关闭了端口监听。\n"),s("img",{attrs:{src:a(244),alt:"connects"}})]),t._v(" "),s("h5",{attrs:{id:"jfr、jmc-和应用-capture-分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jfr、jmc-和应用-capture-分析","aria-hidden":"true"}},[t._v("#")]),t._v(" JFR、JMC 和应用 capture 分析")]),t._v(" "),s("p",[s("strong",[t._v("1.设置 JFR 配置文件")]),s("br"),t._v(" "),s("img",{attrs:{src:a(245),alt:"jfc"}}),s("br"),t._v("\n从 JDK 目录下 JRE 中 lib/jfr 中复制 default.jfc，对配置文件进行修改，增加 socket 相关事件记录，如上图所示")]),t._v(" "),s("p",[s("strong",[t._v("2.启动应用获取 JFR")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" java -XX:+UnlockCommercialFeatures -XX:StartFlightRecording=duration=90s,filename=myrecording.jfr,settings=D:\\taskDemo\\JavaTaskDemo\\javabase\\springbootdemo\\target\\default.jfc -jar .\\springbootdemo-0.0.1-SNAPSHOT.jar\n")])])]),s("p",[t._v("通过指定自定义配置文件，settings=xxx.jfc，生成 myrecording.jfr 文件。")]),t._v(" "),s("p",[s("strong",[t._v("3.使用 JMC 对 JFR 文件进行分析")]),s("br"),t._v("\n启动 JMC 软件，打开 JFR 的 myrecording.jfr 文件进行事件分析，发现应用启动时确实存在 socket event 中的数据发送，数据有 16 个字节，无法看到数据内容"),s("br"),t._v(" "),s("img",{attrs:{src:a(246),alt:"jmc1"}}),s("br"),t._v("\n同时调用堆栈展示如下："),s("br"),t._v(" "),s("img",{attrs:{src:a(247),alt:"jmc2"}})]),t._v(" "),s("p",[s("strong",[t._v("4.wireshark 抓包分析")]),s("br"),t._v("\nJFR 能够记录到链路数据发送长度，但无法得到链路发送的具体内容，于是使用 wireshark 进行数据抓包"),s("br"),t._v(" "),s("img",{attrs:{src:a(248),alt:"wireshark1"}}),s("br"),t._v(" "),s("img",{attrs:{src:a(249),alt:"wireshark2"}}),s("br"),t._v("\n应用启动时确实有 TCP 自连接建立并发送数据，但每次数据内容是随机的")]),t._v(" "),s("h5",{attrs:{id:"源码分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 源码分析")]),t._v(" "),s("p",[t._v("是谁在应用启动时进行 TCP 自连接并发送数据，Maven 下载依赖源码，进行源码分析。根据 JMC 中对堆栈的记录查找数据发送源码位置"),s("br"),t._v(" "),s("img",{attrs:{src:a(250),alt:"sourcecode"}}),s("br"),t._v("\n源码中可以看出应用启动时进行了链路连接监测，发送和接收数据一致的情况下说明通信没有问题，若是数据不一致则一直进行验证，这就会造成很多自连接的情况出现")])])},[],!1,null,null,null);r.default=e.exports}}]);